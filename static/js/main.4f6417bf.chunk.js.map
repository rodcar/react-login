{"version":3,"sources":["logo.svg","components/Header/Header.js","components/Footer/Footer.js","components/LoginForm/LoginForm.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","titulo","logoURL","id","src","Footer","LoginForm","props","state","forgetPassword","submitFormState","submitFormEmailState","username","password","usernameRecover","submitForm","setState","submitFormRecover","handleChange","bind","handleChangeUsername","handleChangePassword","handleChangeUsernameRecover","e","this","target","value","className","action","htmlFor","type","name","placeholder","minlength","onChange","onClick","console","log","ref","Component","nombreSistema","logoCliente","logoDelta","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,wKCY5BC,MATf,YAAsC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QACxB,OACE,gCACE,4BAAKD,GACL,yBAAKE,GAAG,cAAcC,IAAKF,M,MCIlBG,MARf,YAA8B,IAAZH,EAAW,EAAXA,QAChB,OACE,gCACE,yBAAKC,GAAG,aAAaC,IAAKF,M,0CCmHjBI,G,kBA5Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAVRC,MAAQ,CACNC,gBAAgB,EAChBC,iBAAiB,EACjBC,sBAAsB,EACtBC,SAAU,GACVC,SAAU,GACVC,gBAAiB,IAGA,EAYnBC,WAAa,WACX,EAAKC,SAAS,CAAEN,iBAAiB,KAbhB,EA4BnBO,kBAAoB,WAClB,EAAKD,SAAS,CAAEL,sBAAsB,KA3BtC,EAAKO,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,qBAAuB,EAAKA,qBAAqBF,KAA1B,gBAC5B,EAAKG,4BAA8B,EAAKA,4BAA4BH,KAAjC,gBALlB,E,0EAQNI,GACXC,KAAKR,SAAS,CAAEP,eAAgBc,EAAEE,OAAOC,U,2CAOtBH,GACnBC,KAAKR,SAAS,CAAEJ,SAAUW,EAAEE,OAAOC,U,2CAGhBH,GACnBC,KAAKR,SAAS,CAAEH,SAAUU,EAAEE,OAAOC,U,kDAGTH,GAC1BC,KAAKR,SAAS,CAAEF,gBAAiBS,EAAEE,OAAOC,U,+BAQ1C,OAAIF,KAAKhB,MAAMG,qBACN,+CACEa,KAAKhB,MAAME,gBA0CXc,KAAKhB,MAAME,iBAAmBc,KAAKhB,MAAMC,eAEhD,yBAAKkB,UAAU,OACb,0BAAMxB,GAAG,aAAayB,OAAO,kBAC3B,6BACE,wDAEF,6BACE,2BAAOC,QAAQ,oBAAf,YACA,2BACEC,KAAK,OACL3B,GAAG,mBACH4B,KAAK,mBACLC,YAAY,UACZC,UAAU,IACVC,SAAUV,KAAKF,+BAGnB,6BACE,4BAAQa,QAASX,KAAKP,mBAAtB,qBAMRmB,QAAQC,IAAR,+CAAoDb,KAAKhB,MAAMI,SAA/D,+BAA2FY,KAAKhB,MAAMK,WAC/F,gDAlEL,yBAAKc,UAAU,OACb,0BAAMxB,GAAG,aAAayB,OAAO,kBAC3B,6BACE,2BAAOC,QAAQ,YAAf,YACA,2BACEC,KAAK,OACL3B,GAAG,WACH4B,KAAK,WACLC,YAAY,UACZC,UAAU,IACVC,SAAUV,KAAKJ,wBAGnB,6BACE,2BAAOS,QAAQ,YAAf,kBACA,2BACEC,KAAK,WACL3B,GAAG,WACH4B,KAAK,WACLC,YAAY,gBACZC,UAAU,IACVC,SAAUV,KAAKH,wBAGnB,6BACE,2BACES,KAAK,WACLC,KAAK,kBACLL,MAAM,IACNY,IAAI,iBACJJ,SAAUV,KAAKN,eACd,IAPL,wBAUA,6BACE,4BAAQiB,QAASX,KAAKT,YAAtB,kB,GAlFUwB,cCFXC,EAAgB,yBAGhBC,EACX,4GAEWC,EACX,iFCUaC,MAVf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAQ1B,OAAQuC,EAAetC,QAASuC,IACxC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQvC,QAASwC,MCDHE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f6417bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header({ titulo, logoURL }) {\r\n  return (\r\n    <header>\r\n      <h1>{titulo}</h1>\r\n      <img id=\"logo-client\" src={logoURL}></img>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer({ logoURL }) {\r\n  return (\r\n    <footer>\r\n      <img id=\"delta-logo\" src={logoURL}></img>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport \"./LoginForm.css\";\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    forgetPassword: false,\r\n    submitFormState: false,\r\n    submitFormEmailState: false,\r\n    username: '',\r\n    password: '',\r\n    usernameRecover: ''\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChangeUsername = this.handleChangeUsername.bind(this);\r\n    this.handleChangePassword = this.handleChangePassword.bind(this);\r\n    this.handleChangeUsernameRecover = this.handleChangeUsernameRecover.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ forgetPassword: e.target.value });\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.setState({ submitFormState: true });\r\n  };\r\n\r\n  handleChangeUsername(e) {\r\n    this.setState({ username: e.target.value });\r\n  }\r\n\r\n  handleChangePassword(e) {\r\n    this.setState({ password: e.target.value });\r\n  }  \r\n\r\n  handleChangeUsernameRecover(e) {\r\n    this.setState({ usernameRecover: e.target.value });\r\n  }\r\n\r\n  submitFormRecover = () => {\r\n    this.setState({ submitFormEmailState: true });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submitFormEmailState) {\r\n      return <div>Correo enviado</div>;\r\n    }else if (!this.state.submitFormState) {\r\n      return (\r\n        <div className=\"box\">\r\n          <form id=\"login-form\" action=\"recuperar.html\">\r\n            <div>\r\n              <label htmlFor=\"username\">Usuario </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username\"\r\n                name=\"username\"\r\n                placeholder=\"Usuario\"\r\n                minlength=\"3\"\r\n                onChange={this.handleChangeUsername}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"password\">Contraseña </label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                minlength=\"6\"\r\n                onChange={this.handleChangePassword}\r\n              />\r\n            </div>\r\n            <div>\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"password-forget\"\r\n                value=\"f\"\r\n                ref=\"forget_chekbox\"\r\n                onChange={this.handleChange}\r\n              />{\" \"}\r\n              He olvidado mi clave\r\n            </div>\r\n            <div>\r\n              <button onClick={this.submitForm}>Acceder</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else if (this.state.submitFormState && this.state.forgetPassword) {\r\n      return (\r\n        <div className=\"box\">\r\n          <form id=\"login-form\" action=\"recuperar.html\">\r\n            <div>\r\n              <h2>Recuperar contraseña</h2>\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"username-recover\">Usuario </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username-recover\"\r\n                name=\"username-recover\"\r\n                placeholder=\"Usuario\"\r\n                minlength=\"3\"\r\n                onChange={this.handleChangeUsernameRecover}\r\n              />\r\n            </div>\r\n            <div>\r\n              <button onClick={this.submitFormRecover}>Enviar correo</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      console.log(`Intenta autenticarse con el usuario: ${this.state.username} y la contraseña ${this.state.password}`);\r\n      return <div>Autenticandose</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","// Nombre de la aplicación web\r\nexport const nombreSistema = 'Sistema de asistencias';\r\n\r\n// Logo del cliente\r\nexport const logoCliente =\r\n  'https://d500.epimg.net/cincodias/imagenes/2015/05/08/pyme/1431098283_691735_1431098420_noticia_normal.jpg';\r\n// Logo de Delta\r\nexport const logoDelta =\r\n  'https://s3.amazonaws.com/www.laborum.pe/companies/logos/94963/LOGO%20DELTA.png';\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport LoginForm from \"./components/LoginForm/LoginForm\";\nimport { nombreSistema, logoCliente, logoDelta } from \"./config.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header titulo={nombreSistema} logoURL={logoCliente}></Header>\n      <LoginForm></LoginForm>\n      <Footer logoURL={logoDelta}></Footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}